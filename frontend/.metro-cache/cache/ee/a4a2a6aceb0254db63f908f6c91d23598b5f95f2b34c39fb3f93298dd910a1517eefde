{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.buildMatchFn = buildMatchFn;\n  function buildMatchFn(args) {\n    return function (string) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = options.width;\n      var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n      var matchResult = string.match(matchPattern);\n      if (!matchResult) {\n        return null;\n      }\n      var matchedString = matchResult[0];\n      var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n      var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, pattern => pattern.test(matchedString)) :\n      // [TODO] -- I challenge you to fix the type\n      findKey(parsePatterns, pattern => pattern.test(matchedString));\n      var value;\n      value = args.valueCallback ? args.valueCallback(key) : key;\n      value = options.valueCallback ?\n      // [TODO] -- I challenge you to fix the type\n      options.valueCallback(value) : value;\n      var rest = string.slice(matchedString.length);\n      return {\n        value,\n        rest\n      };\n    };\n  }\n  function findKey(object, predicate) {\n    for (var key in object) {\n      if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n  function findIndex(array, predicate) {\n    for (var key = 0; key < array.length; key++) {\n      if (predicate(array[key])) {\n        return key;\n      }\n    }\n    return undefined;\n  }\n});","lineCount":50,"map":[[7,2,1,0,"exports"],[7,9,1,0],[7,10,1,0,"buildMatchFn"],[7,22,1,0],[7,25,1,0,"buildMatchFn"],[7,37,1,0],[8,2,1,7],[8,11,1,16,"buildMatchFn"],[8,23,1,28,"buildMatchFn"],[8,24,1,29,"args"],[8,28,1,33],[8,30,1,35],[9,4,2,2],[9,11,2,9],[9,21,2,10,"string"],[9,27,2,16],[9,29,2,35],[10,6,2,35],[10,10,2,18,"options"],[10,17,2,25],[10,20,2,25,"arguments"],[10,29,2,25],[10,30,2,25,"length"],[10,36,2,25],[10,44,2,25,"arguments"],[10,53,2,25],[10,61,2,25,"undefined"],[10,70,2,25],[10,73,2,25,"arguments"],[10,82,2,25],[10,88,2,28],[10,89,2,29],[10,90,2,30],[11,6,3,4],[11,10,3,10,"width"],[11,15,3,15],[11,18,3,18,"options"],[11,25,3,25],[11,26,3,26,"width"],[11,31,3,31],[12,6,5,4],[12,10,5,10,"matchPattern"],[12,22,5,22],[12,25,6,7,"width"],[12,30,6,12],[12,34,6,16,"args"],[12,38,6,20],[12,39,6,21,"matchPatterns"],[12,52,6,34],[12,53,6,35,"width"],[12,58,6,40],[12,59,6,41],[12,63,7,6,"args"],[12,67,7,10],[12,68,7,11,"matchPatterns"],[12,81,7,24],[12,82,7,25,"args"],[12,86,7,29],[12,87,7,30,"defaultMatchWidth"],[12,104,7,47],[12,105,7,48],[13,6,8,4],[13,10,8,10,"matchResult"],[13,21,8,21],[13,24,8,24,"string"],[13,30,8,30],[13,31,8,31,"match"],[13,36,8,36],[13,37,8,37,"matchPattern"],[13,49,8,49],[13,50,8,50],[14,6,10,4],[14,10,10,8],[14,11,10,9,"matchResult"],[14,22,10,20],[14,24,10,22],[15,8,11,6],[15,15,11,13],[15,19,11,17],[16,6,12,4],[17,6,13,4],[17,10,13,10,"matchedString"],[17,23,13,23],[17,26,13,26,"matchResult"],[17,37,13,37],[17,38,13,38],[17,39,13,39],[17,40,13,40],[18,6,15,4],[18,10,15,10,"parsePatterns"],[18,23,15,23],[18,26,16,7,"width"],[18,31,16,12],[18,35,16,16,"args"],[18,39,16,20],[18,40,16,21,"parsePatterns"],[18,53,16,34],[18,54,16,35,"width"],[18,59,16,40],[18,60,16,41],[18,64,17,6,"args"],[18,68,17,10],[18,69,17,11,"parsePatterns"],[18,82,17,24],[18,83,17,25,"args"],[18,87,17,29],[18,88,17,30,"defaultParseWidth"],[18,105,17,47],[18,106,17,48],[19,6,19,4],[19,10,19,10,"key"],[19,13,19,13],[19,16,19,16,"Array"],[19,21,19,21],[19,22,19,22,"isArray"],[19,29,19,29],[19,30,19,30,"parsePatterns"],[19,43,19,43],[19,44,19,44],[19,47,20,8,"findIndex"],[19,56,20,17],[19,57,20,18,"parsePatterns"],[19,70,20,31],[19,72,20,34,"pattern"],[19,79,20,41],[19,83,20,46,"pattern"],[19,90,20,53],[19,91,20,54,"test"],[19,95,20,58],[19,96,20,59,"matchedString"],[19,109,20,72],[19,110,20,73],[19,111,20,74],[20,6,21,8],[21,6,22,8,"findKey"],[21,13,22,15],[21,14,22,16,"parsePatterns"],[21,27,22,29],[21,29,22,32,"pattern"],[21,36,22,39],[21,40,22,44,"pattern"],[21,47,22,51],[21,48,22,52,"test"],[21,52,22,56],[21,53,22,57,"matchedString"],[21,66,22,70],[21,67,22,71],[21,68,22,72],[22,6,24,4],[22,10,24,8,"value"],[22,15,24,13],[23,6,26,4,"value"],[23,11,26,9],[23,14,26,12,"args"],[23,18,26,16],[23,19,26,17,"valueCallback"],[23,32,26,30],[23,35,26,33,"args"],[23,39,26,37],[23,40,26,38,"valueCallback"],[23,53,26,51],[23,54,26,52,"key"],[23,57,26,55],[23,58,26,56],[23,61,26,59,"key"],[23,64,26,62],[24,6,27,4,"value"],[24,11,27,9],[24,14,27,12,"options"],[24,21,27,19],[24,22,27,20,"valueCallback"],[24,35,27,33],[25,6,28,8],[26,6,29,8,"options"],[26,13,29,15],[26,14,29,16,"valueCallback"],[26,27,29,29],[26,28,29,30,"value"],[26,33,29,35],[26,34,29,36],[26,37,30,8,"value"],[26,42,30,13],[27,6,32,4],[27,10,32,10,"rest"],[27,14,32,14],[27,17,32,17,"string"],[27,23,32,23],[27,24,32,24,"slice"],[27,29,32,29],[27,30,32,30,"matchedString"],[27,43,32,43],[27,44,32,44,"length"],[27,50,32,50],[27,51,32,51],[28,6,34,4],[28,13,34,11],[29,8,34,13,"value"],[29,13,34,18],[30,8,34,20,"rest"],[31,6,34,25],[31,7,34,26],[32,4,35,2],[32,5,35,3],[33,2,36,0],[34,2,38,0],[34,11,38,9,"findKey"],[34,18,38,16,"findKey"],[34,19,38,17,"object"],[34,25,38,23],[34,27,38,25,"predicate"],[34,36,38,34],[34,38,38,36],[35,4,39,2],[35,9,39,7],[35,13,39,13,"key"],[35,16,39,16],[35,20,39,20,"object"],[35,26,39,26],[35,28,39,28],[36,6,40,4],[36,10,41,6,"Object"],[36,16,41,12],[36,17,41,13,"prototype"],[36,26,41,22],[36,27,41,23,"hasOwnProperty"],[36,41,41,37],[36,42,41,38,"call"],[36,46,41,42],[36,47,41,43,"object"],[36,53,41,49],[36,55,41,51,"key"],[36,58,41,54],[36,59,41,55],[36,63,42,6,"predicate"],[36,72,42,15],[36,73,42,16,"object"],[36,79,42,22],[36,80,42,23,"key"],[36,83,42,26],[36,84,42,27],[36,85,42,28],[36,87,43,6],[37,8,44,6],[37,15,44,13,"key"],[37,18,44,16],[38,6,45,4],[39,4,46,2],[40,4,47,2],[40,11,47,9,"undefined"],[40,20,47,18],[41,2,48,0],[42,2,50,0],[42,11,50,9,"findIndex"],[42,20,50,18,"findIndex"],[42,21,50,19,"array"],[42,26,50,24],[42,28,50,26,"predicate"],[42,37,50,35],[42,39,50,37],[43,4,51,2],[43,9,51,7],[43,13,51,11,"key"],[43,16,51,14],[43,19,51,17],[43,20,51,18],[43,22,51,20,"key"],[43,25,51,23],[43,28,51,26,"array"],[43,33,51,31],[43,34,51,32,"length"],[43,40,51,38],[43,42,51,40,"key"],[43,45,51,43],[43,47,51,45],[43,49,51,47],[44,6,52,4],[44,10,52,8,"predicate"],[44,19,52,17],[44,20,52,18,"array"],[44,25,52,23],[44,26,52,24,"key"],[44,29,52,27],[44,30,52,28],[44,31,52,29],[44,33,52,31],[45,8,53,6],[45,15,53,13,"key"],[45,18,53,16],[46,6,54,4],[47,4,55,2],[48,4,56,2],[48,11,56,9,"undefined"],[48,20,56,18],[49,2,57,0],[50,0,57,1],[50,3]],"functionMap":{"names":["<global>","buildMatchFn","<anonymous>","findIndex$argument_1","findKey$argument_1","findKey","findIndex"],"mappings":"AAA,OC;SCC;iCCkB,wCD;+BEE,wCF;GDa;CDC;AKE;CLU;AME;CNO"},"hasCjsExports":false},"type":"js/module"}]}