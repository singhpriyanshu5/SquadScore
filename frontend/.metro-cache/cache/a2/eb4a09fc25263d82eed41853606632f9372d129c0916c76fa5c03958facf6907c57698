{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"p2HPneHw/OdTsxe3h3dVkKepjMk=","exportNames":["*"],"imports":1}},{"name":"./differenceInCalendarDays.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":73,"index":132}}],"key":"imq/EGPR6TLwAkGUJvGZSPH1SeI=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  Object.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function () {\n      return _default;\n    }\n  });\n  exports.differenceInDays = differenceInDays;\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _libNormalizeDatesJs = require(_dependencyMap[1], \"./_lib/normalizeDates.js\");\n  var _differenceInCalendarDaysJs = require(_dependencyMap[2], \"./differenceInCalendarDays.js\");\n  /**\n   * The {@link differenceInDays} function options.\n   */\n\n  /**\n   * @name differenceInDays\n   * @category Day Helpers\n   * @summary Get the number of full days between the given dates.\n   *\n   * @description\n   * Get the number of full day periods between two dates. Fractional days are\n   * truncated towards zero.\n   *\n   * One \"full day\" is the distance between a local time in one day to the same\n   * local time on the next or previous day. A full day can sometimes be less than\n   * or more than 24 hours if a daylight savings change happens between two dates.\n   *\n   * To ignore DST and only measure exact 24-hour periods, use this instead:\n   * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n   *\n   * @param laterDate - The later date\n   * @param earlierDate - The earlier date\n   * @param options - An object with options\n   *\n   * @returns The number of full days according to the local timezone\n   *\n   * @example\n   * // How many full days are between\n   * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n   * const result = differenceInDays(\n   *   new Date(2012, 6, 2, 0, 0),\n   *   new Date(2011, 6, 2, 23, 0)\n   * )\n   * //=> 365\n   *\n   * @example\n   * // How many full days are between\n   * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n   * const result = differenceInDays(\n   *   new Date(2011, 6, 3, 0, 1),\n   *   new Date(2011, 6, 2, 23, 59)\n   * )\n   * //=> 0\n   *\n   * @example\n   * // How many full days are between\n   * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n   * // Note: because local time is used, the\n   * // result will always be 92 days, even in\n   * // time zones where DST starts and the\n   * // period has only 92*24-1 hours.\n   * const result = differenceInDays(\n   *   new Date(2020, 5, 1),\n   *   new Date(2020, 2, 1)\n   * )\n   * //=> 92\n   */\n  function differenceInDays(laterDate, earlierDate, options) {\n    var _normalizeDates = (0, _libNormalizeDatesJs.normalizeDates)(options?.in, laterDate, earlierDate),\n      _normalizeDates2 = (0, _slicedToArray.default)(_normalizeDates, 2),\n      laterDate_ = _normalizeDates2[0],\n      earlierDate_ = _normalizeDates2[1];\n    var sign = compareLocalAsc(laterDate_, earlierDate_);\n    var difference = Math.abs((0, _differenceInCalendarDaysJs.differenceInCalendarDays)(laterDate_, earlierDate_));\n    laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n    // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n    // If so, result must be decreased by 1 in absolute value\n    var isLastDayNotFull = Number(compareLocalAsc(laterDate_, earlierDate_) === -sign);\n    var result = sign * (difference - isLastDayNotFull);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  }\n\n  // Like `compareAsc` but uses local time not UTC, which is needed\n  // for accurate equality comparisons of UTC timestamps that end up\n  // having the same representation in local time, e.g. one hour before\n  // DST ends vs. the instant that DST ends.\n  function compareLocalAsc(laterDate, earlierDate) {\n    var diff = laterDate.getFullYear() - earlierDate.getFullYear() || laterDate.getMonth() - earlierDate.getMonth() || laterDate.getDate() - earlierDate.getDate() || laterDate.getHours() - earlierDate.getHours() || laterDate.getMinutes() - earlierDate.getMinutes() || laterDate.getSeconds() - earlierDate.getSeconds() || laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n    if (diff < 0) return -1;\n    if (diff > 0) return 1;\n\n    // Return 0 if diff is 0; return NaN if diff is NaN\n    return diff;\n  }\n\n  // Fallback for modularized imports:\n  var _default = differenceInDays;\n});","lineCount":112,"map":[[12,2,108,0,"Object"],[12,8,108,0],[12,9,108,0,"defineProperty"],[12,23,108,0],[12,24,108,0,"exports"],[12,31,108,0],[13,4,108,0,"enumerable"],[13,14,108,0],[14,4,108,0,"get"],[14,7,108,0],[14,18,108,0,"get"],[14,19,108,0],[15,6,108,0],[15,13,108,0,"_default"],[15,21,108,0],[16,4,108,0],[17,2,108,0],[18,2,61,0,"exports"],[18,9,61,0],[18,10,61,0,"differenceInDays"],[18,26,61,0],[18,29,61,0,"differenceInDays"],[18,45,61,0],[19,2,84,1],[19,6,84,1,"_babelRuntimeHelpersSlicedToArray"],[19,39,84,1],[19,42,84,1,"require"],[19,49,84,1],[19,50,84,1,"_dependencyMap"],[19,64,84,1],[20,2,84,1],[20,6,84,1,"_slicedToArray"],[20,20,84,1],[20,23,84,1,"_interopDefault"],[20,38,84,1],[20,39,84,1,"_babelRuntimeHelpersSlicedToArray"],[20,72,84,1],[21,2,1,0],[21,6,1,0,"_libNormalizeDatesJs"],[21,26,1,0],[21,29,1,0,"require"],[21,36,1,0],[21,37,1,0,"_dependencyMap"],[21,51,1,0],[22,2,2,0],[22,6,2,0,"_differenceInCalendarDaysJs"],[22,33,2,0],[22,36,2,0,"require"],[22,43,2,0],[22,44,2,0,"_dependencyMap"],[22,58,2,0],[23,2,4,0],[24,0,5,0],[25,0,6,0],[27,2,8,0],[28,0,9,0],[29,0,10,0],[30,0,11,0],[31,0,12,0],[32,0,13,0],[33,0,14,0],[34,0,15,0],[35,0,16,0],[36,0,17,0],[37,0,18,0],[38,0,19,0],[39,0,20,0],[40,0,21,0],[41,0,22,0],[42,0,23,0],[43,0,24,0],[44,0,25,0],[45,0,26,0],[46,0,27,0],[47,0,28,0],[48,0,29,0],[49,0,30,0],[50,0,31,0],[51,0,32,0],[52,0,33,0],[53,0,34,0],[54,0,35,0],[55,0,36,0],[56,0,37,0],[57,0,38,0],[58,0,39,0],[59,0,40,0],[60,0,41,0],[61,0,42,0],[62,0,43,0],[63,0,44,0],[64,0,45,0],[65,0,46,0],[66,0,47,0],[67,0,48,0],[68,0,49,0],[69,0,50,0],[70,0,51,0],[71,0,52,0],[72,0,53,0],[73,0,54,0],[74,0,55,0],[75,0,56,0],[76,0,57,0],[77,0,58,0],[78,0,59,0],[79,0,60,0],[80,2,61,7],[80,11,61,16,"differenceInDays"],[80,27,61,32,"differenceInDays"],[80,28,61,33,"laterDate"],[80,37,61,42],[80,39,61,44,"earlierDate"],[80,50,61,55],[80,52,61,57,"options"],[80,59,61,64],[80,61,61,66],[81,4,62,2],[81,8,62,2,"_normalizeDates"],[81,23,62,2],[81,26,62,37],[81,30,62,37,"normalizeDates"],[81,50,62,51],[81,51,62,51,"normalizeDates"],[81,65,62,51],[81,67,63,4,"options"],[81,74,63,11],[81,76,63,13,"in"],[81,78,63,15],[81,80,64,4,"laterDate"],[81,89,64,13],[81,91,65,4,"earlierDate"],[81,102,66,2],[81,103,66,3],[82,6,66,3,"_normalizeDates2"],[82,22,66,3],[82,29,66,3,"_slicedToArray"],[82,43,66,3],[82,44,66,3,"default"],[82,51,66,3],[82,53,66,3,"_normalizeDates"],[82,68,66,3],[83,6,62,9,"laterDate_"],[83,16,62,19],[83,19,62,19,"_normalizeDates2"],[83,35,62,19],[84,6,62,21,"earlierDate_"],[84,18,62,33],[84,21,62,33,"_normalizeDates2"],[84,37,62,33],[85,4,68,2],[85,8,68,8,"sign"],[85,12,68,12],[85,15,68,15,"compareLocalAsc"],[85,30,68,30],[85,31,68,31,"laterDate_"],[85,41,68,41],[85,43,68,43,"earlierDate_"],[85,55,68,55],[85,56,68,56],[86,4,69,2],[86,8,69,8,"difference"],[86,18,69,18],[86,21,69,21,"Math"],[86,25,69,25],[86,26,69,26,"abs"],[86,29,69,29],[86,30,70,4],[86,34,70,4,"differenceInCalendarDays"],[86,61,70,28],[86,62,70,28,"differenceInCalendarDays"],[86,86,70,28],[86,88,70,29,"laterDate_"],[86,98,70,39],[86,100,70,41,"earlierDate_"],[86,112,70,53],[86,113,71,2],[86,114,71,3],[87,4,73,2,"laterDate_"],[87,14,73,12],[87,15,73,13,"setDate"],[87,22,73,20],[87,23,73,21,"laterDate_"],[87,33,73,31],[87,34,73,32,"getDate"],[87,41,73,39],[87,42,73,40],[87,43,73,41],[87,46,73,44,"sign"],[87,50,73,48],[87,53,73,51,"difference"],[87,63,73,61],[87,64,73,62],[89,4,75,2],[90,4,76,2],[91,4,77,2],[91,8,77,8,"isLastDayNotFull"],[91,24,77,24],[91,27,77,27,"Number"],[91,33,77,33],[91,34,78,4,"compareLocalAsc"],[91,49,78,19],[91,50,78,20,"laterDate_"],[91,60,78,30],[91,62,78,32,"earlierDate_"],[91,74,78,44],[91,75,78,45],[91,80,78,50],[91,81,78,51,"sign"],[91,85,79,2],[91,86,79,3],[92,4,81,2],[92,8,81,8,"result"],[92,14,81,14],[92,17,81,17,"sign"],[92,21,81,21],[92,25,81,25,"difference"],[92,35,81,35],[92,38,81,38,"isLastDayNotFull"],[92,54,81,54],[92,55,81,55],[93,4,82,2],[94,4,83,2],[94,11,83,9,"result"],[94,17,83,15],[94,22,83,20],[94,23,83,21],[94,26,83,24],[94,27,83,25],[94,30,83,28,"result"],[94,36,83,34],[95,2,84,0],[97,2,86,0],[98,2,87,0],[99,2,88,0],[100,2,89,0],[101,2,90,0],[101,11,90,9,"compareLocalAsc"],[101,26,90,24,"compareLocalAsc"],[101,27,90,25,"laterDate"],[101,36,90,34],[101,38,90,36,"earlierDate"],[101,49,90,47],[101,51,90,49],[102,4,91,2],[102,8,91,8,"diff"],[102,12,91,12],[102,15,92,4,"laterDate"],[102,24,92,13],[102,25,92,14,"getFullYear"],[102,36,92,25],[102,37,92,26],[102,38,92,27],[102,41,92,30,"earlierDate"],[102,52,92,41],[102,53,92,42,"getFullYear"],[102,64,92,53],[102,65,92,54],[102,66,92,55],[102,70,93,4,"laterDate"],[102,79,93,13],[102,80,93,14,"getMonth"],[102,88,93,22],[102,89,93,23],[102,90,93,24],[102,93,93,27,"earlierDate"],[102,104,93,38],[102,105,93,39,"getMonth"],[102,113,93,47],[102,114,93,48],[102,115,93,49],[102,119,94,4,"laterDate"],[102,128,94,13],[102,129,94,14,"getDate"],[102,136,94,21],[102,137,94,22],[102,138,94,23],[102,141,94,26,"earlierDate"],[102,152,94,37],[102,153,94,38,"getDate"],[102,160,94,45],[102,161,94,46],[102,162,94,47],[102,166,95,4,"laterDate"],[102,175,95,13],[102,176,95,14,"getHours"],[102,184,95,22],[102,185,95,23],[102,186,95,24],[102,189,95,27,"earlierDate"],[102,200,95,38],[102,201,95,39,"getHours"],[102,209,95,47],[102,210,95,48],[102,211,95,49],[102,215,96,4,"laterDate"],[102,224,96,13],[102,225,96,14,"getMinutes"],[102,235,96,24],[102,236,96,25],[102,237,96,26],[102,240,96,29,"earlierDate"],[102,251,96,40],[102,252,96,41,"getMinutes"],[102,262,96,51],[102,263,96,52],[102,264,96,53],[102,268,97,4,"laterDate"],[102,277,97,13],[102,278,97,14,"getSeconds"],[102,288,97,24],[102,289,97,25],[102,290,97,26],[102,293,97,29,"earlierDate"],[102,304,97,40],[102,305,97,41,"getSeconds"],[102,315,97,51],[102,316,97,52],[102,317,97,53],[102,321,98,4,"laterDate"],[102,330,98,13],[102,331,98,14,"getMilliseconds"],[102,346,98,29],[102,347,98,30],[102,348,98,31],[102,351,98,34,"earlierDate"],[102,362,98,45],[102,363,98,46,"getMilliseconds"],[102,378,98,61],[102,379,98,62],[102,380,98,63],[103,4,100,2],[103,8,100,6,"diff"],[103,12,100,10],[103,15,100,13],[103,16,100,14],[103,18,100,16],[103,25,100,23],[103,26,100,24],[103,27,100,25],[104,4,101,2],[104,8,101,6,"diff"],[104,12,101,10],[104,15,101,13],[104,16,101,14],[104,18,101,16],[104,25,101,23],[104,26,101,24],[106,4,103,2],[107,4,104,2],[107,11,104,9,"diff"],[107,15,104,13],[108,2,105,0],[110,2,107,0],[111,2,108,0],[111,6,108,0,"_default"],[111,14,108,0],[111,17,108,15,"differenceInDays"],[111,33,108,31],[112,0,108,32],[112,3]],"functionMap":{"names":["<global>","differenceInDays","compareLocalAsc"],"mappings":"AAA;OC4D;CDuB;AEM;CFe"},"hasCjsExports":false},"type":"js/module"}]}